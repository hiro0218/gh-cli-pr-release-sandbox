name: git-pr-release

on:
  push:
    branches:
      - develop
      - 'feature/maintenance-**'
  workflow_dispatch:

jobs:
  release-to-main:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1 # PRの存在チェックには最新のコミット情報のみあれば良い

      - name: Set base and head branches for PR
        run: |
          echo "BASE_BRANCH=main" >> $GITHUB_ENV
          echo "HEAD_BRANCH=develop" >> $GITHUB_ENV

      - name: Check if PR exists between base and head
        run: |
          PR_NUMBER=$(gh pr list --base $BASE_BRANCH --head $HEAD_BRANCH --json number -q ".[].number")
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR if not exists
        if: env.PR_NUMBER == ''
        run: |
          PR_CREATE_OUTPUT=$(gh pr create --base $BASE_BRANCH --head $HEAD_BRANCH --title "Auto PR by git-pr-release" --body "Automatically generated PR.")
          echo "$PR_CREATE_OUTPUT"
          
          # 新しいPRの番号を抽出して環境変数に設定
          PR_NUMBER=$(echo "$PR_CREATE_OUTPUT" | grep -o 'https://github.com/.*/pull/[0-9]*' | grep -o '[0-9]*$')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PR description
        if: env.PR_NUMBER != ''
        run: |          
          # 日付フォーマットを +%Y/%m/%d %H:%M に指定
          CURRENT_DATE=$(TZ='Asia/Tokyo' date "+%Y/%m/%d %H:%M")
          
          # マージされたPR一覧
          impact_list=$(gh pr list --base $HEAD_BRANCH --state merged --search '-label:"1 本番影響なし"' --json url,author --template '{{range .}}- [ ] {{.url}} @{{.author.login}}{{"\n"}}{{end}}')
          no_impact_list=$(gh pr list --base $HEAD_BRANCH --state merged --search 'label:"1 本番影響なし"' --json url,author --template '{{range .}}- [ ] {{.url}} @{{.author.login}}{{"\n"}}{{end}}')

          # PRへの説明欄
          PR_DESCRIPTION=$(cat <<EOF
          
          ### 本番影響あり
          <!-- 本番影響ありのPRリスト挿入 -->
          $impact_list

          ### 本番影響なし
          <!-- 本番影響なしのPRリスト挿入 -->
          $no_impact_list

          EOF
          )

          # GitHub CLIを使ってPRの概要を更新する
          ADDITIONAL_CONTENT=$(cat <<'EOF'

          - [ ] pilot 反映済み
          
          ---
          
          ## 銘柄
          > [!WARNING]
          >
          > 本番影響がないこと, dev*・pilot環境で問題ないことを確認済みで release しても問題ない場合は check を入れてください。
          > 
          > [リリース体制について](https://zozo.rickcloud.jp/wiki/x/FlWmF#:~:text=%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E4%BD%93%E5%88%B6)

          EOF
          )
          
          FULL_PR_DESCRIPTION="${ADDITIONAL_CONTENT}${PR_DESCRIPTION}"
          gh pr edit "$PR_NUMBER" --title "Release $CURRENT_DATE" --body "$FULL_PR_DESCRIPTION"
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  maintenance-job:
    if: startsWith(github.ref, 'refs/heads/feature/maintenance-')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1 # PRの存在チェックには最新のコミット情報のみあれば良い

      - name: Set base and head branches for PR
        run: |
          HEAD_BRANCH="${GITHUB_REF#refs/heads/}"
          echo "BASE_BRANCH=develop" >> $GITHUB_ENV
          echo "HEAD_BRANCH=${HEAD_BRANCH}" >> $GITHUB_ENV

      - name: Check if PR exists between base and head
        run: |
          PR_NUMBER=$(gh pr list --base $BASE_BRANCH --head $HEAD_BRANCH --json number -q ".[].number")
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PR description
        if: env.PR_NUMBER != ''
        run: |                    
          # マージされたPR一覧
          impact_list=$(gh pr list --base $HEAD_BRANCH --state merged --search '-label:"1 本番影響なし"' --json url,author --template '{{range .}}- [ ] {{.url}} @{{.author.login}}{{"\n"}}{{end}}')
          no_impact_list=$(gh pr list --base $HEAD_BRANCH --state merged --search 'label:"1 本番影響なし"' --json url,author --template '{{range .}}- [ ] {{.url}} @{{.author.login}}{{"\n"}}{{end}}')

          # PRへの説明欄
          PR_DESCRIPTION=$(cat <<EOF
          
          ### 本番影響あり
          <!-- 本番影響ありのPRリスト挿入 -->
          $impact_list

          ### 本番影響なし
          <!-- 本番影響なしのPRリスト挿入 -->
          $no_impact_list

          EOF
          )

          # GitHub CLIを使ってPRの概要を更新する
          gh pr edit "$PR_NUMBER" --body "$PR_DESCRIPTION"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
